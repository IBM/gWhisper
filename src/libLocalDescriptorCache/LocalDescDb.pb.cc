// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocalDescDb.proto

#include "LocalDescDb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocalDescDb_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Host_LocalDescDb_2eproto;
namespace localDescDb {
class DescriptorDbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescriptorDb> _instance;
} _DescriptorDb_default_instance_;
class HostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Host> _instance;
} _Host_default_instance_;
}  // namespace localDescDb
static void InitDefaultsscc_info_DescriptorDb_LocalDescDb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localDescDb::_DescriptorDb_default_instance_;
    new (ptr) ::localDescDb::DescriptorDb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localDescDb::DescriptorDb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescriptorDb_LocalDescDb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescriptorDb_LocalDescDb_2eproto}, {
      &scc_info_Host_LocalDescDb_2eproto.base,}};

static void InitDefaultsscc_info_Host_LocalDescDb_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::localDescDb::_Host_default_instance_;
    new (ptr) ::localDescDb::Host();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::localDescDb::Host::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Host_LocalDescDb_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Host_LocalDescDb_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LocalDescDb_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_LocalDescDb_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LocalDescDb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LocalDescDb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localDescDb::DescriptorDb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localDescDb::DescriptorDb, hosts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::localDescDb::Host, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::localDescDb::Host, hostaddress_),
  PROTOBUF_FIELD_OFFSET(::localDescDb::Host, lastupdate_),
  PROTOBUF_FIELD_OFFSET(::localDescDb::Host, file_descriptor_proto_),
  PROTOBUF_FIELD_OFFSET(::localDescDb::Host, test_),
  PROTOBUF_FIELD_OFFSET(::localDescDb::Host, servicelist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::localDescDb::DescriptorDb)},
  { 6, -1, sizeof(::localDescDb::Host)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localDescDb::_DescriptorDb_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::localDescDb::_Host_default_instance_),
};

const char descriptor_table_protodef_LocalDescDb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021LocalDescDb.proto\022\013localDescDb\032\037google"
  "/protobuf/timestamp.proto\"0\n\014DescriptorD"
  "b\022 \n\005hosts\030\001 \003(\0132\021.localDescDb.Host\"\215\001\n\004"
  "Host\022\023\n\013hostAddress\030\001 \001(\t\022.\n\nlastUpdate\030"
  "\002 \001(\0132\032.google.protobuf.Timestamp\022\035\n\025fil"
  "e_descriptor_proto\030\003 \003(\014\022\014\n\004test\030\005 \001(\t\022\023"
  "\n\013serviceList\030\004 \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LocalDescDb_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LocalDescDb_2eproto_sccs[2] = {
  &scc_info_DescriptorDb_LocalDescDb_2eproto.base,
  &scc_info_Host_LocalDescDb_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LocalDescDb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LocalDescDb_2eproto = {
  false, false, descriptor_table_protodef_LocalDescDb_2eproto, "LocalDescDb.proto", 267,
  &descriptor_table_LocalDescDb_2eproto_once, descriptor_table_LocalDescDb_2eproto_sccs, descriptor_table_LocalDescDb_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_LocalDescDb_2eproto::offsets,
  file_level_metadata_LocalDescDb_2eproto, 2, file_level_enum_descriptors_LocalDescDb_2eproto, file_level_service_descriptors_LocalDescDb_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LocalDescDb_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LocalDescDb_2eproto)), true);
namespace localDescDb {

// ===================================================================

void DescriptorDb::InitAsDefaultInstance() {
}
class DescriptorDb::_Internal {
 public:
};

DescriptorDb::DescriptorDb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hosts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localDescDb.DescriptorDb)
}
DescriptorDb::DescriptorDb(const DescriptorDb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hosts_(from.hosts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:localDescDb.DescriptorDb)
}

void DescriptorDb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescriptorDb_LocalDescDb_2eproto.base);
}

DescriptorDb::~DescriptorDb() {
  // @@protoc_insertion_point(destructor:localDescDb.DescriptorDb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescriptorDb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DescriptorDb::ArenaDtor(void* object) {
  DescriptorDb* _this = reinterpret_cast< DescriptorDb* >(object);
  (void)_this;
}
void DescriptorDb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescriptorDb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescriptorDb& DescriptorDb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescriptorDb_LocalDescDb_2eproto.base);
  return *internal_default_instance();
}


void DescriptorDb::Clear() {
// @@protoc_insertion_point(message_clear_start:localDescDb.DescriptorDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescriptorDb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .localDescDb.Host hosts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hosts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescriptorDb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localDescDb.DescriptorDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .localDescDb.Host hosts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hosts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hosts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localDescDb.DescriptorDb)
  return target;
}

size_t DescriptorDb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localDescDb.DescriptorDb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .localDescDb.Host hosts = 1;
  total_size += 1UL * this->_internal_hosts_size();
  for (const auto& msg : this->hosts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescriptorDb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localDescDb.DescriptorDb)
  GOOGLE_DCHECK_NE(&from, this);
  const DescriptorDb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescriptorDb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localDescDb.DescriptorDb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localDescDb.DescriptorDb)
    MergeFrom(*source);
  }
}

void DescriptorDb::MergeFrom(const DescriptorDb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localDescDb.DescriptorDb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
}

void DescriptorDb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localDescDb.DescriptorDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescriptorDb::CopyFrom(const DescriptorDb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localDescDb.DescriptorDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescriptorDb::IsInitialized() const {
  return true;
}

void DescriptorDb::InternalSwap(DescriptorDb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hosts_.InternalSwap(&other->hosts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DescriptorDb::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Host::InitAsDefaultInstance() {
  ::localDescDb::_Host_default_instance_._instance.get_mutable()->lastupdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Host::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& lastupdate(const Host* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Host::_Internal::lastupdate(const Host* msg) {
  return *msg->lastupdate_;
}
void Host::clear_lastupdate() {
  if (GetArena() == nullptr && lastupdate_ != nullptr) {
    delete lastupdate_;
  }
  lastupdate_ = nullptr;
}
Host::Host(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  file_descriptor_proto_(arena),
  servicelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:localDescDb.Host)
}
Host::Host(const Host& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      file_descriptor_proto_(from.file_descriptor_proto_),
      servicelist_(from.servicelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostaddress().empty()) {
    hostaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostaddress(),
      GetArena());
  }
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test().empty()) {
    test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test(),
      GetArena());
  }
  if (from._internal_has_lastupdate()) {
    lastupdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.lastupdate_);
  } else {
    lastupdate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:localDescDb.Host)
}

void Host::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Host_LocalDescDb_2eproto.base);
  hostaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastupdate_ = nullptr;
}

Host::~Host() {
  // @@protoc_insertion_point(destructor:localDescDb.Host)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Host::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lastupdate_;
}

void Host::ArenaDtor(void* object) {
  Host* _this = reinterpret_cast< Host* >(object);
  (void)_this;
}
void Host::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Host::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Host& Host::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Host_LocalDescDb_2eproto.base);
  return *internal_default_instance();
}


void Host::Clear() {
// @@protoc_insertion_point(message_clear_start:localDescDb.Host)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_descriptor_proto_.Clear();
  servicelist_.Clear();
  hostaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && lastupdate_ != nullptr) {
    delete lastupdate_;
  }
  lastupdate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Host::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hostAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hostaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localDescDb.Host.hostAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp lastUpdate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lastupdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes file_descriptor_proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_descriptor_proto();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string serviceList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_servicelist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localDescDb.Host.serviceList"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string test = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_test();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "localDescDb.Host.test"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Host::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:localDescDb.Host)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostAddress = 1;
  if (this->hostaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostaddress().data(), static_cast<int>(this->_internal_hostaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localDescDb.Host.hostAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostaddress(), target);
  }

  // .google.protobuf.Timestamp lastUpdate = 2;
  if (this->has_lastupdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lastupdate(this), target, stream);
  }

  // repeated bytes file_descriptor_proto = 3;
  for (int i = 0, n = this->_internal_file_descriptor_proto_size(); i < n; i++) {
    const auto& s = this->_internal_file_descriptor_proto(i);
    target = stream->WriteBytes(3, s, target);
  }

  // repeated string serviceList = 4;
  for (int i = 0, n = this->_internal_servicelist_size(); i < n; i++) {
    const auto& s = this->_internal_servicelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localDescDb.Host.serviceList");
    target = stream->WriteString(4, s, target);
  }

  // string test = 5;
  if (this->test().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test().data(), static_cast<int>(this->_internal_test().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "localDescDb.Host.test");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_test(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:localDescDb.Host)
  return target;
}

size_t Host::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:localDescDb.Host)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes file_descriptor_proto = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(file_descriptor_proto_.size());
  for (int i = 0, n = file_descriptor_proto_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      file_descriptor_proto_.Get(i));
  }

  // repeated string serviceList = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(servicelist_.size());
  for (int i = 0, n = servicelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      servicelist_.Get(i));
  }

  // string hostAddress = 1;
  if (this->hostaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostaddress());
  }

  // string test = 5;
  if (this->test().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test());
  }

  // .google.protobuf.Timestamp lastUpdate = 2;
  if (this->has_lastupdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lastupdate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Host::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:localDescDb.Host)
  GOOGLE_DCHECK_NE(&from, this);
  const Host* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Host>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:localDescDb.Host)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:localDescDb.Host)
    MergeFrom(*source);
  }
}

void Host::MergeFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:localDescDb.Host)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_descriptor_proto_.MergeFrom(from.file_descriptor_proto_);
  servicelist_.MergeFrom(from.servicelist_);
  if (from.hostaddress().size() > 0) {
    _internal_set_hostaddress(from._internal_hostaddress());
  }
  if (from.test().size() > 0) {
    _internal_set_test(from._internal_test());
  }
  if (from.has_lastupdate()) {
    _internal_mutable_lastupdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_lastupdate());
  }
}

void Host::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:localDescDb.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:localDescDb.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Host::IsInitialized() const {
  return true;
}

void Host::InternalSwap(Host* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  file_descriptor_proto_.InternalSwap(&other->file_descriptor_proto_);
  servicelist_.InternalSwap(&other->servicelist_);
  hostaddress_.Swap(&other->hostaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_.Swap(&other->test_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lastupdate_, other->lastupdate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Host::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localDescDb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::localDescDb::DescriptorDb* Arena::CreateMaybeMessage< ::localDescDb::DescriptorDb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localDescDb::DescriptorDb >(arena);
}
template<> PROTOBUF_NOINLINE ::localDescDb::Host* Arena::CreateMaybeMessage< ::localDescDb::Host >(Arena* arena) {
  return Arena::CreateMessageInternal< ::localDescDb::Host >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
