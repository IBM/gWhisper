// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocalDescDb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LocalDescDb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LocalDescDb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LocalDescDb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LocalDescDb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LocalDescDb_2eproto;
namespace localDescDb {
class DescriptorDb;
class DescriptorDbDefaultTypeInternal;
extern DescriptorDbDefaultTypeInternal _DescriptorDb_default_instance_;
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
}  // namespace localDescDb
PROTOBUF_NAMESPACE_OPEN
template<> ::localDescDb::DescriptorDb* Arena::CreateMaybeMessage<::localDescDb::DescriptorDb>(Arena*);
template<> ::localDescDb::Host* Arena::CreateMaybeMessage<::localDescDb::Host>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace localDescDb {

// ===================================================================

class DescriptorDb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localDescDb.DescriptorDb) */ {
 public:
  inline DescriptorDb() : DescriptorDb(nullptr) {};
  virtual ~DescriptorDb();

  DescriptorDb(const DescriptorDb& from);
  DescriptorDb(DescriptorDb&& from) noexcept
    : DescriptorDb() {
    *this = ::std::move(from);
  }

  inline DescriptorDb& operator=(const DescriptorDb& from) {
    CopyFrom(from);
    return *this;
  }
  inline DescriptorDb& operator=(DescriptorDb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DescriptorDb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DescriptorDb* internal_default_instance() {
    return reinterpret_cast<const DescriptorDb*>(
               &_DescriptorDb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DescriptorDb& a, DescriptorDb& b) {
    a.Swap(&b);
  }
  inline void Swap(DescriptorDb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DescriptorDb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DescriptorDb* New() const final {
    return CreateMaybeMessage<DescriptorDb>(nullptr);
  }

  DescriptorDb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DescriptorDb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DescriptorDb& from);
  void MergeFrom(const DescriptorDb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DescriptorDb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localDescDb.DescriptorDb";
  }
  protected:
  explicit DescriptorDb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocalDescDb_2eproto);
    return ::descriptor_table_LocalDescDb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostsFieldNumber = 1,
  };
  // repeated .localDescDb.Host hosts = 1;
  int hosts_size() const;
  private:
  int _internal_hosts_size() const;
  public:
  void clear_hosts();
  ::localDescDb::Host* mutable_hosts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localDescDb::Host >*
      mutable_hosts();
  private:
  const ::localDescDb::Host& _internal_hosts(int index) const;
  ::localDescDb::Host* _internal_add_hosts();
  public:
  const ::localDescDb::Host& hosts(int index) const;
  ::localDescDb::Host* add_hosts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localDescDb::Host >&
      hosts() const;

  // @@protoc_insertion_point(class_scope:localDescDb.DescriptorDb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localDescDb::Host > hosts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalDescDb_2eproto;
};
// -------------------------------------------------------------------

class Host PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:localDescDb.Host) */ {
 public:
  inline Host() : Host(nullptr) {};
  virtual ~Host();

  Host(const Host& from);
  Host(Host&& from) noexcept
    : Host() {
    *this = ::std::move(from);
  }

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }
  inline Host& operator=(Host&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Host& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Host* internal_default_instance() {
    return reinterpret_cast<const Host*>(
               &_Host_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Host& a, Host& b) {
    a.Swap(&b);
  }
  inline void Swap(Host* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Host* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Host* New() const final {
    return CreateMaybeMessage<Host>(nullptr);
  }

  Host* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Host>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Host* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "localDescDb.Host";
  }
  protected:
  explicit Host(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LocalDescDb_2eproto);
    return ::descriptor_table_LocalDescDb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDescriptorProtoFieldNumber = 3,
    kServiceListFieldNumber = 4,
    kHostAddressFieldNumber = 1,
    kTestFieldNumber = 5,
    kLastUpdateFieldNumber = 2,
  };
  // repeated bytes file_descriptor_proto = 3;
  int file_descriptor_proto_size() const;
  private:
  int _internal_file_descriptor_proto_size() const;
  public:
  void clear_file_descriptor_proto();
  const std::string& file_descriptor_proto(int index) const;
  std::string* mutable_file_descriptor_proto(int index);
  void set_file_descriptor_proto(int index, const std::string& value);
  void set_file_descriptor_proto(int index, std::string&& value);
  void set_file_descriptor_proto(int index, const char* value);
  void set_file_descriptor_proto(int index, const void* value, size_t size);
  std::string* add_file_descriptor_proto();
  void add_file_descriptor_proto(const std::string& value);
  void add_file_descriptor_proto(std::string&& value);
  void add_file_descriptor_proto(const char* value);
  void add_file_descriptor_proto(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_descriptor_proto() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_descriptor_proto();
  private:
  const std::string& _internal_file_descriptor_proto(int index) const;
  std::string* _internal_add_file_descriptor_proto();
  public:

  // repeated string serviceList = 4;
  int servicelist_size() const;
  private:
  int _internal_servicelist_size() const;
  public:
  void clear_servicelist();
  const std::string& servicelist(int index) const;
  std::string* mutable_servicelist(int index);
  void set_servicelist(int index, const std::string& value);
  void set_servicelist(int index, std::string&& value);
  void set_servicelist(int index, const char* value);
  void set_servicelist(int index, const char* value, size_t size);
  std::string* add_servicelist();
  void add_servicelist(const std::string& value);
  void add_servicelist(std::string&& value);
  void add_servicelist(const char* value);
  void add_servicelist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& servicelist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_servicelist();
  private:
  const std::string& _internal_servicelist(int index) const;
  std::string* _internal_add_servicelist();
  public:

  // string hostAddress = 1;
  void clear_hostaddress();
  const std::string& hostaddress() const;
  void set_hostaddress(const std::string& value);
  void set_hostaddress(std::string&& value);
  void set_hostaddress(const char* value);
  void set_hostaddress(const char* value, size_t size);
  std::string* mutable_hostaddress();
  std::string* release_hostaddress();
  void set_allocated_hostaddress(std::string* hostaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostaddress(
      std::string* hostaddress);
  private:
  const std::string& _internal_hostaddress() const;
  void _internal_set_hostaddress(const std::string& value);
  std::string* _internal_mutable_hostaddress();
  public:

  // string test = 5;
  void clear_test();
  const std::string& test() const;
  void set_test(const std::string& value);
  void set_test(std::string&& value);
  void set_test(const char* value);
  void set_test(const char* value, size_t size);
  std::string* mutable_test();
  std::string* release_test();
  void set_allocated_test(std::string* test);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_test();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_test(
      std::string* test);
  private:
  const std::string& _internal_test() const;
  void _internal_set_test(const std::string& value);
  std::string* _internal_mutable_test();
  public:

  // .google.protobuf.Timestamp lastUpdate = 2;
  bool has_lastupdate() const;
  private:
  bool _internal_has_lastupdate() const;
  public:
  void clear_lastupdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& lastupdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_lastupdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lastupdate();
  void set_allocated_lastupdate(PROTOBUF_NAMESPACE_ID::Timestamp* lastupdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lastupdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lastupdate();
  public:
  void unsafe_arena_set_allocated_lastupdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* lastupdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lastupdate();

  // @@protoc_insertion_point(class_scope:localDescDb.Host)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_descriptor_proto_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> servicelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_;
  PROTOBUF_NAMESPACE_ID::Timestamp* lastupdate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalDescDb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DescriptorDb

// repeated .localDescDb.Host hosts = 1;
inline int DescriptorDb::_internal_hosts_size() const {
  return hosts_.size();
}
inline int DescriptorDb::hosts_size() const {
  return _internal_hosts_size();
}
inline void DescriptorDb::clear_hosts() {
  hosts_.Clear();
}
inline ::localDescDb::Host* DescriptorDb::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:localDescDb.DescriptorDb.hosts)
  return hosts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localDescDb::Host >*
DescriptorDb::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:localDescDb.DescriptorDb.hosts)
  return &hosts_;
}
inline const ::localDescDb::Host& DescriptorDb::_internal_hosts(int index) const {
  return hosts_.Get(index);
}
inline const ::localDescDb::Host& DescriptorDb::hosts(int index) const {
  // @@protoc_insertion_point(field_get:localDescDb.DescriptorDb.hosts)
  return _internal_hosts(index);
}
inline ::localDescDb::Host* DescriptorDb::_internal_add_hosts() {
  return hosts_.Add();
}
inline ::localDescDb::Host* DescriptorDb::add_hosts() {
  // @@protoc_insertion_point(field_add:localDescDb.DescriptorDb.hosts)
  return _internal_add_hosts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::localDescDb::Host >&
DescriptorDb::hosts() const {
  // @@protoc_insertion_point(field_list:localDescDb.DescriptorDb.hosts)
  return hosts_;
}

// -------------------------------------------------------------------

// Host

// string hostAddress = 1;
inline void Host::clear_hostaddress() {
  hostaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Host::hostaddress() const {
  // @@protoc_insertion_point(field_get:localDescDb.Host.hostAddress)
  return _internal_hostaddress();
}
inline void Host::set_hostaddress(const std::string& value) {
  _internal_set_hostaddress(value);
  // @@protoc_insertion_point(field_set:localDescDb.Host.hostAddress)
}
inline std::string* Host::mutable_hostaddress() {
  // @@protoc_insertion_point(field_mutable:localDescDb.Host.hostAddress)
  return _internal_mutable_hostaddress();
}
inline const std::string& Host::_internal_hostaddress() const {
  return hostaddress_.Get();
}
inline void Host::_internal_set_hostaddress(const std::string& value) {
  
  hostaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Host::set_hostaddress(std::string&& value) {
  
  hostaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:localDescDb.Host.hostAddress)
}
inline void Host::set_hostaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:localDescDb.Host.hostAddress)
}
inline void Host::set_hostaddress(const char* value,
    size_t size) {
  
  hostaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:localDescDb.Host.hostAddress)
}
inline std::string* Host::_internal_mutable_hostaddress() {
  
  return hostaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Host::release_hostaddress() {
  // @@protoc_insertion_point(field_release:localDescDb.Host.hostAddress)
  return hostaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::set_allocated_hostaddress(std::string* hostaddress) {
  if (hostaddress != nullptr) {
    
  } else {
    
  }
  hostaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:localDescDb.Host.hostAddress)
}
inline std::string* Host::unsafe_arena_release_hostaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:localDescDb.Host.hostAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Host::unsafe_arena_set_allocated_hostaddress(
    std::string* hostaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostaddress != nullptr) {
    
  } else {
    
  }
  hostaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localDescDb.Host.hostAddress)
}

// .google.protobuf.Timestamp lastUpdate = 2;
inline bool Host::_internal_has_lastupdate() const {
  return this != internal_default_instance() && lastupdate_ != nullptr;
}
inline bool Host::has_lastupdate() const {
  return _internal_has_lastupdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Host::_internal_lastupdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = lastupdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Host::lastupdate() const {
  // @@protoc_insertion_point(field_get:localDescDb.Host.lastUpdate)
  return _internal_lastupdate();
}
inline void Host::unsafe_arena_set_allocated_lastupdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* lastupdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastupdate_);
  }
  lastupdate_ = lastupdate;
  if (lastupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localDescDb.Host.lastUpdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Host::release_lastupdate() {
  auto temp = unsafe_arena_release_lastupdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Host::unsafe_arena_release_lastupdate() {
  // @@protoc_insertion_point(field_release:localDescDb.Host.lastUpdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = lastupdate_;
  lastupdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Host::_internal_mutable_lastupdate() {
  
  if (lastupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    lastupdate_ = p;
  }
  return lastupdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Host::mutable_lastupdate() {
  // @@protoc_insertion_point(field_mutable:localDescDb.Host.lastUpdate)
  return _internal_mutable_lastupdate();
}
inline void Host::set_allocated_lastupdate(PROTOBUF_NAMESPACE_ID::Timestamp* lastupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastupdate_);
  }
  if (lastupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastupdate)->GetArena();
    if (message_arena != submessage_arena) {
      lastupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastupdate, submessage_arena);
    }
    
  } else {
    
  }
  lastupdate_ = lastupdate;
  // @@protoc_insertion_point(field_set_allocated:localDescDb.Host.lastUpdate)
}

// repeated bytes file_descriptor_proto = 3;
inline int Host::_internal_file_descriptor_proto_size() const {
  return file_descriptor_proto_.size();
}
inline int Host::file_descriptor_proto_size() const {
  return _internal_file_descriptor_proto_size();
}
inline void Host::clear_file_descriptor_proto() {
  file_descriptor_proto_.Clear();
}
inline std::string* Host::add_file_descriptor_proto() {
  // @@protoc_insertion_point(field_add_mutable:localDescDb.Host.file_descriptor_proto)
  return _internal_add_file_descriptor_proto();
}
inline const std::string& Host::_internal_file_descriptor_proto(int index) const {
  return file_descriptor_proto_.Get(index);
}
inline const std::string& Host::file_descriptor_proto(int index) const {
  // @@protoc_insertion_point(field_get:localDescDb.Host.file_descriptor_proto)
  return _internal_file_descriptor_proto(index);
}
inline std::string* Host::mutable_file_descriptor_proto(int index) {
  // @@protoc_insertion_point(field_mutable:localDescDb.Host.file_descriptor_proto)
  return file_descriptor_proto_.Mutable(index);
}
inline void Host::set_file_descriptor_proto(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:localDescDb.Host.file_descriptor_proto)
  file_descriptor_proto_.Mutable(index)->assign(value);
}
inline void Host::set_file_descriptor_proto(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:localDescDb.Host.file_descriptor_proto)
  file_descriptor_proto_.Mutable(index)->assign(std::move(value));
}
inline void Host::set_file_descriptor_proto(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_descriptor_proto_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:localDescDb.Host.file_descriptor_proto)
}
inline void Host::set_file_descriptor_proto(int index, const void* value, size_t size) {
  file_descriptor_proto_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:localDescDb.Host.file_descriptor_proto)
}
inline std::string* Host::_internal_add_file_descriptor_proto() {
  return file_descriptor_proto_.Add();
}
inline void Host::add_file_descriptor_proto(const std::string& value) {
  file_descriptor_proto_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:localDescDb.Host.file_descriptor_proto)
}
inline void Host::add_file_descriptor_proto(std::string&& value) {
  file_descriptor_proto_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:localDescDb.Host.file_descriptor_proto)
}
inline void Host::add_file_descriptor_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_descriptor_proto_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:localDescDb.Host.file_descriptor_proto)
}
inline void Host::add_file_descriptor_proto(const void* value, size_t size) {
  file_descriptor_proto_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:localDescDb.Host.file_descriptor_proto)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Host::file_descriptor_proto() const {
  // @@protoc_insertion_point(field_list:localDescDb.Host.file_descriptor_proto)
  return file_descriptor_proto_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Host::mutable_file_descriptor_proto() {
  // @@protoc_insertion_point(field_mutable_list:localDescDb.Host.file_descriptor_proto)
  return &file_descriptor_proto_;
}

// string test = 5;
inline void Host::clear_test() {
  test_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Host::test() const {
  // @@protoc_insertion_point(field_get:localDescDb.Host.test)
  return _internal_test();
}
inline void Host::set_test(const std::string& value) {
  _internal_set_test(value);
  // @@protoc_insertion_point(field_set:localDescDb.Host.test)
}
inline std::string* Host::mutable_test() {
  // @@protoc_insertion_point(field_mutable:localDescDb.Host.test)
  return _internal_mutable_test();
}
inline const std::string& Host::_internal_test() const {
  return test_.Get();
}
inline void Host::_internal_set_test(const std::string& value) {
  
  test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Host::set_test(std::string&& value) {
  
  test_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:localDescDb.Host.test)
}
inline void Host::set_test(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:localDescDb.Host.test)
}
inline void Host::set_test(const char* value,
    size_t size) {
  
  test_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:localDescDb.Host.test)
}
inline std::string* Host::_internal_mutable_test() {
  
  return test_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Host::release_test() {
  // @@protoc_insertion_point(field_release:localDescDb.Host.test)
  return test_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Host::set_allocated_test(std::string* test) {
  if (test != nullptr) {
    
  } else {
    
  }
  test_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:localDescDb.Host.test)
}
inline std::string* Host::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_unsafe_arena_release:localDescDb.Host.test)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return test_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Host::unsafe_arena_set_allocated_test(
    std::string* test) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (test != nullptr) {
    
  } else {
    
  }
  test_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      test, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:localDescDb.Host.test)
}

// repeated string serviceList = 4;
inline int Host::_internal_servicelist_size() const {
  return servicelist_.size();
}
inline int Host::servicelist_size() const {
  return _internal_servicelist_size();
}
inline void Host::clear_servicelist() {
  servicelist_.Clear();
}
inline std::string* Host::add_servicelist() {
  // @@protoc_insertion_point(field_add_mutable:localDescDb.Host.serviceList)
  return _internal_add_servicelist();
}
inline const std::string& Host::_internal_servicelist(int index) const {
  return servicelist_.Get(index);
}
inline const std::string& Host::servicelist(int index) const {
  // @@protoc_insertion_point(field_get:localDescDb.Host.serviceList)
  return _internal_servicelist(index);
}
inline std::string* Host::mutable_servicelist(int index) {
  // @@protoc_insertion_point(field_mutable:localDescDb.Host.serviceList)
  return servicelist_.Mutable(index);
}
inline void Host::set_servicelist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:localDescDb.Host.serviceList)
  servicelist_.Mutable(index)->assign(value);
}
inline void Host::set_servicelist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:localDescDb.Host.serviceList)
  servicelist_.Mutable(index)->assign(std::move(value));
}
inline void Host::set_servicelist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servicelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:localDescDb.Host.serviceList)
}
inline void Host::set_servicelist(int index, const char* value, size_t size) {
  servicelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:localDescDb.Host.serviceList)
}
inline std::string* Host::_internal_add_servicelist() {
  return servicelist_.Add();
}
inline void Host::add_servicelist(const std::string& value) {
  servicelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:localDescDb.Host.serviceList)
}
inline void Host::add_servicelist(std::string&& value) {
  servicelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:localDescDb.Host.serviceList)
}
inline void Host::add_servicelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servicelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:localDescDb.Host.serviceList)
}
inline void Host::add_servicelist(const char* value, size_t size) {
  servicelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:localDescDb.Host.serviceList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Host::servicelist() const {
  // @@protoc_insertion_point(field_list:localDescDb.Host.serviceList)
  return servicelist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Host::mutable_servicelist() {
  // @@protoc_insertion_point(field_mutable_list:localDescDb.Host.serviceList)
  return &servicelist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localDescDb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LocalDescDb_2eproto
