# Copyright 2019 IBM Corporation
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

##############################################################################
# Default values / uninitialized fields test
##############################################################################
#START_TEST defaultValueInOutputMessage
@@CMD@@ 127.0.0.1 examples.ScalarTypeRpcs negateBool m_bool=true
/.* Received message:
| m_bool = false
RPC succeeded :D
#END_TEST

#START_TEST DefaultValueInInputMessage
@@CMD@@ 127.0.0.1 examples.ScalarTypeRpcs negateBool
Warning: no Fields found in parseTree for message 'Bool'
/.* Received message:
| m_bool = true
RPC succeeded :D
#END_TEST

#START_TEST NoneSetSubMessage
@@CMD@@  127.0.0.1 examples.NestedTypeRpcs echoNestedMaps
Warning: no Fields found in parseTree for message 'NestedMaps'
/.* Received message:
| number_and_string..... = [NOT SET]
| sub_message........... = [NOT SET]
| simple_map_int[0/0]... = {}
| simple_map_string[0/0] = {}
RPC succeeded :D
#END_TEST

##############################################################################
# Client streaming RPCs
##############################################################################

#START_TEST requestStream0Count
@@CMD@@ 127.0.0.1 examples.StreamingRpcs requestStreamCountMessages
/.* Received message:
| number = 0 (0x00000000)
RPC succeeded :D
#END_TEST

#START_TEST requestStream2Count
@@CMD@@ 127.0.0.1 examples.StreamingRpcs requestStreamCountMessages :: ::
/.* Received message:
| number = 2 (0x00000002)
RPC succeeded :D
#END_TEST

#START_TEST biStreamNegate2
@@CMD@@ 127.0.0.1 examples.StreamingRpcs bidirectionalStreamNegateNumbers :number=5 number=3: :number=7:
/.* Received message:
| number = -3
/.* Received message:
| number = -7
RPC succeeded :D
#END_TEST

#START_TEST biStreamNegate0
@@CMD@@ 127.0.0.1 examples.StreamingRpcs bidirectionalStreamNegateNumbers
RPC succeeded :D
#END_TEST

##############################################################################
# Output format tests:
##############################################################################

#START_TEST EmptyFieldCorrectlyFormatted
@@CMD@@ 127.0.0.1 examples.NestedTypeRpcs returnNestedMixedEmpty
/.* Received message:
| some_integer..... = 0 (0x00000000)
| empty_child...... = {Empty}
| number_and_string = [NOT SET]
RPC succeeded :D
#END_TEST


##############################################################################
# String tests:
##############################################################################

#START_TEST stringInRepeated
@@CMD@@ 127.0.0.1 examples.ComplexTypeRpcs echoNumberAndStrings number_and_strings=::str=text number=0::
/.* Received message:
| number_and_strings[1/1] = {NumberAndString}
| | number = 0 (0x00000000)
| | str... = "text"
RPC succeeded :D
#END_TEST

#START_TEST simpleString
@@CMD@@ 127.0.0.1 examples.ScalarTypeRpcs capitalizeString text=asdf
/.* Received message:
| text = "ASDF"
RPC succeeded :D
#END_TEST

#START_TEST simpleEscape
@@CMD@@ 127.0.0.1 examples.ScalarTypeRpcs capitalizeString text=%:
/.* Received message:
| text = ":"
RPC succeeded :D
#END_TEST

#START_TEST complexEscape
@@CMD@@ 127.0.0.1 examples.ScalarTypeRpcs capitalizeString text=Hello% World%,%:
/.* Received message:
| text = "HELLO WORLD,:"
RPC succeeded :D
#END_TEST

#START_TEST veryComplexEscape
@@CMD@@ 127.0.0.1 examples.ComplexTypeRpcs echoNumberAndStrings number_and_strings=::str=text%:% %, number=0::
/.* Received message:
| number_and_strings[1/1] = {NumberAndString}
| | number = 0 (0x00000000)
| | str... = "text: ,"
RPC succeeded :D
#END_TEST

#START_TEST veryComplexEscape2
@@CMD@@ 127.0.0.1 examples.StreamingRpcs bidirectionalStreamEchoNumberOrString :str=asd: :str=asd2%:% :
/.* Received message:
| number = [NOT SET]
| str... = "asd"
| both.. = [NOT SET]
/.* Received message:
| number = [NOT SET]
| str... = "asd2: "
| both.. = [NOT SET]
RPC succeeded :D
#END_TEST

##############################################################################
# Custom output tests:
##############################################################################

#START_TEST prefix_postfix_float_output_format
@@CMD@@ --customOutput @.:prefix /m_float/ postfix: 127.0.0.1 examples.ScalarTypeRpcs incrementNumbers m_float=1.675
/.* Received message:
prefix 2.675000 postfix
RPC succeeded :D
#END_TEST

##############################################################################
# JSON output
##############################################################################
#START_TEST json_output_number_map
@@CMD@@ --jsonOutput 127.0.0.1 examples.ComplexTypeRpcs mapNumbersToString numbers=:5:
/.* Received message:
{"number_to_string":{"5":"5"}}
RPC succeeded :D
#END_TEST

#START_TEST json_output_number_map
@@CMD@@ --jsonOutput 127.0.0.1 examples.NestedTypeRpcs returnNestedMixedEmpty
/.* Received message:
{"empty_child":{}}
RPC succeeded :D
#END_TEST

#START_TEST json_output_number_map
@@CMD@@ --jsonOutput 127.0.0.1 examples.ComplexTypeRpcs getLastColor colors=:blue, black:
/.* Received message:
{"color":"black"}
RPC succeeded :D
#END_TEST

##############################################################################
# JSON input
##############################################################################
#START_TEST json_input_stdin
cat @@testResources@@/duplicateEverything1d.json | @@CMD@@ --jsonInput=- 127.0.0.1 examples.NestedTypeRpcs duplicateEverything1d
/.* Received message:
| some_numbers..... = {Numbers}
| | m_double = 15.800000
| | m_float. = 0.000000
| | m_int32. = 0
| | m_int64. = 17864
| | m_uint32 = 0 (0x00000000)
| | m_uint64 = 0 (0x0000000000000000)
| number_and_string = {NumberAndString}
| | number = 10 (0x0000000a)
| | str... = "hallohallo"
| str.............. = "Top Level String"
RPC succeeded :D
#END_TEST

#START_TEST json_input_stdin_malformed
cat @@testResources@@/duplicateEverything1d_malformed.json | @@CMD@@ --jsonInput=- 127.0.0.1 examples.NestedTypeRpcs duplicateEverything1d
Warning: Failed to parse JSON file '-': INVALID_ARGUMENT:Unexpected end of string. Expected , or } after key:value pair.

^
Error parsing method arguments -> aborting the call :-(
#END_TEST

#START_TEST json_input_file
@@CMD@@ --jsonInput=@@testResources@@/duplicateEverything1d.json 127.0.0.1 examples.NestedTypeRpcs duplicateEverything1d
/.* Received message:
| some_numbers..... = {Numbers}
| | m_double = 15.800000
| | m_float. = 0.000000
| | m_int32. = 0
| | m_int64. = 17864
| | m_uint32 = 0 (0x00000000)
| | m_uint64 = 0 (0x0000000000000000)
| number_and_string = {NumberAndString}
| | number = 10 (0x0000000a)
| | str... = "hallohallo"
| str.............. = "Top Level String"
RPC succeeded :D
#END_TEST
